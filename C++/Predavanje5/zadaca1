/*Во една зоолошка градина се води евиденција за различни типови животни кои се чуваат во неа: птици, влекачи, цицачи.... 
Користејќи ги концептите на ООП да се моделира класа според спецификациите дадени на слика 5.1. Цицачите се вакцинираат секоја 
година, птиците на секои 6 месеци, а влекачите на секои 8 месеци. Датумите да се дефинираат во посебна класа Datum со приватни 
податочни членки den, mesec и godina. Да се имплементира кориснички посредник преку мени со следните опции:
1.	Додавање на животно во зоолошка градина
2.	Прикажување на бројна состојба
3.	Прикажување на животни од дадена група (тип: c- цицачи, v-влекачи, p-птици)
4.	Прикажување на целата листа
5.	Прикажување на сите животни кои треба да се вакцинираат во рок од 1 недела
6.	Излез од менито
*/

#ifndef DATUM_H
#define DATUM_H

class Datum
{
private:
    int den;
    int mesec;
    int godina;
public:
    Datum();
    Datum(int d, int m, int g);
    int getDen();
    int getMesec();
    int getGodina();
    void pecatiDatum();
};

#endif // DATUM_H

#ifndef ZIVOTNO_H
#define ZIVOTNO_H
#include <Datum.h>

class Zivotno
{
private:
    Datum datum_na_ragjanje;
    Datum datum_na_donesuvanje_vo_zoo;
    char tip;
    char pol;
    char ime[20];
    Datum datum_na_posledna_vakcinacija;
public:
    Zivotno();
    Zivotno(Datum dr, Datum dd, char tip, char pol, char ime[], Datum dv);
    void prikazi_podatoci();
    int presmetaj_vakcinacija();
    char getTip();
    void vnesi_podatoci();
};

#endif // ZIVOTNO_H


#include <iostream>

using namespace std;

#include <Datum.h>

Datum::Datum()
{
    Datum::den=1;
    Datum::mesec=1;
    Datum::godina=1970;
}

Datum::Datum(int d, int m, int g)
{
    Datum::den=d;
    Datum::mesec=m;
    Datum::godina=g;
}

int Datum::getDen()
{
    return Datum::den;
}

int Datum::getMesec()
{
    return Datum::mesec;
}

int Datum::getGodina()
{
    return Datum::godina;
}

void Datum::pecatiDatum()
{
    cout<<Datum::den<<"/"<<Datum::mesec<<"/"<<Datum::godina<<endl;
}


#include <iostream>
#include <zivotno.h>
#include <Datum.h>
#include <string>
using namespace std;

Zivotno::Zivotno()
{
    Zivotno::datum_na_ragjanje=Datum();
    Zivotno::datum_na_donesuvanje_vo_zoo=Datum();
    Zivotno::tip=' ';
    Zivotno::pol=' ';
    Zivotno::ime[0]=' ';
    Zivotno::datum_na_posledna_vakcinacija=Datum();
}

Zivotno::Zivotno(Datum dr, Datum dd, char tip, char pol, char ime[], Datum dv)
{
    int i;
    Zivotno::datum_na_ragjanje=dr;
    Zivotno::datum_na_donesuvanje_vo_zoo=dd;
    Zivotno::tip=tip;
    Zivotno::pol=pol;
    for(i=0;i<strlen(ime);i++)
    {
        Zivotno::ime[i]=ime[i];
    }
    Zivotno::datum_na_posledna_vakcinacija=dv;
}

void Zivotno::prikazi_podatoci()
{
    int i;
    for(i=0;i<strlen(Zivotno::ime);i++)
    {
        cout<<Zivotno::ime[i];
    }

}

char Zivotno::getTip()
{
    return Zivotno::tip;
}

int Zivotno::presmetaj_vakcinacija()
{
    Datum denesenDatum = Datum(25,10,2019);
    int tmpD,tmpM,tmpG, tmpRez;
    if(Zivotno::tip=='c')
    {
        tmpG=denesenDatum.getGodina()-Zivotno::datum_na_posledna_vakcinacija.getGodina();
        tmpM=denesenDatum.getMesec()-Zivotno::datum_na_posledna_vakcinacija.getMesec();
        tmpD=denesenDatum.getDen()-Zivotno::datum_na_posledna_vakcinacija.getDen();
        tmpRez=tmpG*365+tmpM*30+tmpD;
        return tmpRez;
    }
    else
        if(Zivotno::tip=='v')
        {
            tmpG=denesenDatum.getGodina()-Zivotno::datum_na_posledna_vakcinacija.getGodina();
            tmpM=denesenDatum.getMesec()-Zivotno::datum_na_posledna_vakcinacija.getMesec();
            tmpD=denesenDatum.getDen()-Zivotno::datum_na_posledna_vakcinacija.getDen();
            tmpRez=tmpG*365+tmpM*30+tmpD;
            return tmpRez-240;
        }
    else
        {
            tmpG=denesenDatum.getGodina()-Zivotno::datum_na_posledna_vakcinacija.getGodina();
            tmpM=denesenDatum.getMesec()-Zivotno::datum_na_posledna_vakcinacija.getMesec();
            tmpD=denesenDatum.getDen()-Zivotno::datum_na_posledna_vakcinacija.getDen();
            tmpRez=tmpG*365+tmpM*30+tmpD;
            return tmpRez-180;
        }
}

void Zivotno::vnesi_podatoci()
{
    int d=0, m=0, g=0;
    char pom_t=' ', pom_p=' ';
    char pom_ime[20];
    cout<<"Vnesi datum na ragjanje na zivotnoto"<<endl;
    cin>>d;
    cin>>m;
    cin>>g;
    Datum datumR = Datum(d,m,g);
    cout<<"Vnesi datum na donesuvanje vo zoo"<<endl;
    cin>>d;
    cin>>m;
    cin>>g;
    Datum datumD = Datum(d,m,g);
    cout<<"Vnesi go Tipot na zivotnoto"<<endl;
    cin>>pom_t;
    cout<<"Vnesi go polot na zivotnoto"<<endl;
    cin>>pom_p;
    cout<<"Vnesi go imeto na zivotnoto"<<endl;
    cin>>pom_ime;
    cout<<"Vnesi datum na posledna vakcinacija na zivotnoto"<<endl;
    cin>>d;
    cin>>m;
    cin>>g;
    Datum datumV = Datum(d,m,g);
    Zivotno(datumR,datumD,pom_t,pom_p,pom_ime,datumV);
}


#include <iostream>
#include <stdlib.h>
#include <Datum.h>
#include <zivotno.h>

using namespace std;


char menu();

int main()
{
    char izbor=' ';
    Zivotno *zoo = nullptr;
    int i=0;
    while(1)
        {
            izbor=menu();
            if(izbor=='k')
            {
                cout<<"KRAJ"<<endl;
                return 0;
            }
            else
            {
            int tmp, flag=0;
            char tip;
            switch (izbor) {
            case 'a':
                zoo[i].vnesi_podatoci();
                i++;
                break;
           case 'b':
                cout<<"Vkupen broj na zivotni vo Zoo e "<<i<<endl;
                break;
           case 'c':
                cout<<"Vnesite tip na zivotno(tip: c-cicaci, v-vlekaci, p-ptici)"<<endl;
                cin>>tip;
                tmp=i-1;
                while(tmp>=0)
                {
                    if(zoo[tmp].getTip() == tip)
                    {
                        zoo[tmp].prikazi_podatoci();
                        flag=1;
                    }
                    tmp--;
                }
                if(flag!=1)
                {
                    cout<<"Nema zivotni od toj tip"<<endl;
                }
                flag=0;
                break;
           case 'd':
                tmp=i-1;
                while(tmp>=0)
                {
                    zoo[tmp].prikazi_podatoci();
                    tmp--;
                }
                break;
            case 'e':
                cout<<"Zivotni koi treba da se vakciniraat vo slednata nedela: "<<endl;
                tmp=i-1;
                while(tmp>=0)
                {
                    int pomoshna = zoo[tmp].presmetaj_vakcinacija();
                    if(pomoshna>=0 && pomoshna<=7)
                    {
                       zoo[tmp].prikazi_podatoci();
                    }
                    tmp--;
                }
                if(flag!=1)
                {
                    cout<<"Nema takvi zivotni"<<endl;
                }
                flag=0;
                break;
           default :
                cout<<"Vnesivte pogreshen izbot"<<endl;
                break;
                }
            }
        }
}
char menu()
{
    char izbor=' ';
    cout<<"***Odberete edna od founkciite na Zoo menito***"<<endl;
    cout<<"a --> Dodavanje zivotno vo Zoo gradina"<<endl;
    cout<<"b --> Prikazuvanje na brojna sostojba"<<endl;
    cout<<"c --> Prikazuvanje na zivotni od dadena grupa(tip: c-cicaci, v-vlekaci, p-ptici)"<<endl;
    cout<<"d --> Prikazuvanje na celata lista"<<endl;
    cout<<"e --> Prikazuvanje na site zivotni koi treba da se vakciniraat vo rok od 1 nedela"<<endl;
    cout<<"k --> Izlez od menu-to"<<endl;
    cin >> izbor;
    return izbor;
}
