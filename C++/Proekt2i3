/*oblik.h*/
#ifndef OBLIK_H
#define OBLIK_H
#include <string>

using namespace std;

class Oblik
{
public:
    Oblik();
    virtual ~Oblik() = 0;
    virtual double getPloshtina()const = 0;
    virtual double getPerimetar() const = 0;
    virtual double getVolume() const = 0;
    virtual void pecati()const =0;
    virtual int getBroj() const = 0;
private:
    static int brojFiguri;
};

#endif // OBLIK_H



/*DvoDimenzionalni.h*/
#ifndef DVODIMENZIONALNI_H
#define DVODIMENZIONALNI_H
#include <string.h>
#include <oblik.h>

using namespace std; 

class DvoDimenzionalni : public Oblik
{
private:
    static int br2D;
public:
    DvoDimenzionalni();
    ~DvoDimenzionalni() override;
    virtual double getPerimetar() const override;
    virtual double getPloshtina() const override;
    virtual double getVolume() const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};

#endif // DVODIMENZIONALNI_H


/*TriDimenzionalni*/
#ifndef TRIDIMENZIONALNI_H
#define TRIDIMENZIONALNI_H
#include <oblik.h>

using namespace std;

class TriDimenzionalni : public Oblik
{
private:
    static int br3D;
public:
    TriDimenzionalni();
    ~TriDimenzionalni() override;
    virtual double getPerimetar() const override;
    virtual double getPloshtina() const override;
    virtual double getVolume() const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};

#endif // TRIDIMENZIONALNI_H



/*krug.h*/
#ifndef KRUG_H
#define KRUG_H
#include <DvoDimenzionalni.h>
#include <string.h>

using namespace std;

class Krug : public DvoDimenzionalni
{
private:
    double radius;
    static int brKrug;
public:
    Krug(double);
    ~Krug() override;
    void setRadius(double);
    double getRadius() const;
    double getDiametar() const;
    double getPerimetar() const override;
    virtual double getPloshtina() const override;
    virtual void pecati() const override;
    int getBroj() const override; 
};

#endif // KRUG_H

/*triagolnik.h*/
#ifndef TRIAGOLNIK_H
#define TRIAGOLNIK_H
#include <DvoDimenzionalni.h>

using namespace std;

class Triagolnik : public DvoDimenzionalni
{
private:
    int aStrana;
    int bStrana;
    int cStrana;
    static int brTriagolnici;
public:
    Triagolnik(int,int,int);
    ~Triagolnik() override;
    void setStranaA(int);
    void setStranaB(int);
    void setStranaC(int);
    int getStranaA()const;
    int getStranaB()const;
    int getStranaC()const;
    virtual double getPerimetar()const override;
    virtual double getPloshtina()const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};

#endif // TRIAGOLNIK_H



/*rectangle.h*/
#ifndef RECTANGLE_H
#define RECTANGLE_H
#include <DvoDimenzionalni.h>

using namespace std;

class Rectangle : public DvoDimenzionalni
{
private:
    int dolzina;
    int shirina;
    static int brRectangle;
public:
    Rectangle(int, int);
    ~Rectangle()override;
    void setDolzina(int);
    void setShirina(int);
    int getDolzina() const;
    int getShirina() const;
    virtual double getPerimetar()const override;
    virtual double getPloshtina() const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};

#endif // RECTANGLE_H



/*cilindar.h*/
#ifndef CILINDAR_H
#define CILINDAR_H
#include <TriDimenzionalni.h>
#include <krug.h>

using namespace std;

class Cilindar : public Krug, public TriDimenzionalni
{
private:
    double visina;
    static int brCilindari;
public:
    Cilindar(double,double);
    virtual ~Cilindar() override;
    void setVisina(double);
    double getVisina() const;
    virtual double getPerimetar() const override;
    virtual double getVolume() const override;
    virtual double getPloshtina() const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};

#endif // CILINDAR_H


/*cuboid.h*/
#ifndef CUBOID_H
#define CUBOID_H
#include <TriDimenzionalni.h>
#include <rectangle.h>

using namespace std;

class Cuboid : public Rectangle, public TriDimenzionalni
{
private:
    double visina;
    static int brCuboid;
public:
    Cuboid(int,int,double);
    virtual ~Cuboid() override;
    void setVisina(double);
    double getVisina() const;
    virtual double getPerimetar() const override;
    virtual double getVolume() const override;
    virtual double getPloshtina() const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};


#endif // CUBOID_H



/*svera.h*/
#ifndef SVERA_H
#define SVERA_H
#include <TriDimenzionalni.h>
#include <krug.h>

using namespace std;

class Svera : public Krug, public TriDimenzionalni
{
private:
    static int brSveri;
public:
    Svera(double);
    virtual ~Svera() override;
    virtual double getPerimetar() const override;
    virtual double getVolume() const override;
    virtual double getPloshtina() const override;
    virtual void pecati() const override;
    virtual int getBroj() const override;
};

#endif // SVERA_H


/*oblik.cpp*/
#include <iostream>
#include <oblik.h>
#include <string.h>

using namespace std;

int Oblik::brojFiguri=0;

Oblik::Oblik()
{
    brojFiguri++;
}

Oblik::~Oblik()
{
    brojFiguri--;
}

double Oblik::getPloshtina() const
{
    return 0.0;
}

double Oblik::getPerimetar() const
{
    return 0.0;
}

double Oblik::getVolume() const
{
    return 0.0;
}

int Oblik::getBroj() const
{
    return brojFiguri;
}



/*dvodimenzionalni.cpp*/
#include <iostream>
#include <oblik.h>
#include <DvoDimenzionalni.h>
#include <string.h>

using namespace std;

int DvoDimenzionalni::br2D=0;

DvoDimenzionalni::DvoDimenzionalni()
{
    br2D++;
}

DvoDimenzionalni::~DvoDimenzionalni()
{
    br2D--;
}

void DvoDimenzionalni::pecati() const
{
        cout<<"2D";
}


int DvoDimenzionalni::getBroj() const
{
    return br2D;
}

double DvoDimenzionalni::getPerimetar() const
{
    return 0.0;
}

double DvoDimenzionalni::getPloshtina() const
{
    return 0.0;
}

double DvoDimenzionalni::getVolume() const
{
    return 0.0;
}



/*tridimenzionalni.cpp*/
#include <iostream>
#include <oblik.h>
#include <TriDimenzionalni.h>
#include <string.h>

using namespace std;

int TriDimenzionalni::br3D=0;

TriDimenzionalni::TriDimenzionalni()
{
    br3D++;
}

TriDimenzionalni::~TriDimenzionalni()
{
    br3D--;
}

void TriDimenzionalni::pecati() const
{
    cout<<"3D";
}

int TriDimenzionalni::getBroj() const
{
    return br3D;
}

double TriDimenzionalni::getVolume() const
{
    return 0.0;
}

double TriDimenzionalni::getPerimetar() const
{
    return 0.0;
}

double TriDimenzionalni::getPloshtina() const
{
    return 0.0;
}



/*triagolnik.cpp*/
#include <iostream>
#include <DvoDimenzionalni.h>
#include <triagolnik.h>
#include <math.h>

using namespace std;

int Triagolnik::brTriagolnici=0;

Triagolnik::Triagolnik(int a, int b, int c)
{
    Triagolnik::setStranaA(a);
    Triagolnik::setStranaB(b);
    Triagolnik::setStranaC(c);
    brTriagolnici++;
}

Triagolnik::~Triagolnik()
{
    brTriagolnici--;
}

void Triagolnik::setStranaA(int a)
{
    Triagolnik::aStrana=a;
}

void Triagolnik::setStranaB(int b)
{
    Triagolnik::bStrana=b;
}

void Triagolnik::setStranaC(int c)
{
    Triagolnik::cStrana=c;
}

int Triagolnik::getStranaA() const
{
    return aStrana;
}

int Triagolnik::getStranaB() const
{
    return bStrana;
}

int Triagolnik::getStranaC() const
{
    return cStrana;
}

double Triagolnik::getPerimetar() const
{
    return getStranaA()+getStranaB()+getStranaC();
}

double Triagolnik::getPloshtina() const
{
    double s=(getStranaA()+getStranaB()+getStranaC())/2;
    double plos=sqrt(s*(s-getStranaA())*(s-getStranaB())*(s-getStranaC()));
    return plos;
}

void Triagolnik::pecati() const
{
    cout<<"Centarot e";
    DvoDimenzionalni::pecati();
    cout<<"Stranata A e "<<getStranaA()<<endl;
    cout<<"Stranata B e "<<getStranaB()<<endl;
    cout<<"Stranata C e "<<getStranaC()<<endl;
    cout<<"Ploshtinata na Triagolnikot e "<<getPloshtina()<<endl;
    cout<<"Perimetart na Triagolnikot e "<<getPerimetar()<<endl;
}

int Triagolnik::getBroj() const
{
    return brTriagolnici;
}



/*krug.cpp*/
#include <iostream>
#include <DvoDimenzionalni.h>
#include <krug.h>
#include <string.h>

using namespace std;

int Krug::brKrug=0;

Krug::Krug(double r)
{
    Krug::setRadius(r);
    brKrug++;
}

Krug::~Krug()
{
    brKrug--;
}

void Krug::setRadius(double r)
{
    Krug::radius=r;
}

double Krug::getRadius() const
{
    return Krug::radius;
}

double Krug::getDiametar() const
{
    return 2*radius;
}

double Krug::getPerimetar() const
{
    return 3.14*getDiametar();
}

double Krug::getPloshtina() const
{
    return 3.14*getRadius()*getRadius();
}

void Krug::pecati() const
{
    cout<<"Centarot e";
    DvoDimenzionalni::pecati();
    cout<<"radiusot na Krugot e "<<getRadius()<<endl;
    cout<<"Ploshtinata na Krugot e "<<getPloshtina()<<endl;
    cout<<"Perimetart na Krugot e "<<getPerimetar()<<endl;
}

int Krug::getBroj() const
{
    return brKrug;
}



/*rectangle.cpp*/
#include <rectangle.h>
#include <DvoDimenzionalni.h>
#include <iostream>
#include <string.h>

using namespace std;

int Rectangle::brRectangle=0;

Rectangle::Rectangle(int d, int s)
{
    Rectangle::setDolzina(d);
    Rectangle::setShirina(s);
    brRectangle++;
}

Rectangle::~Rectangle()
{
    brRectangle--;
}

void Rectangle::setDolzina(int d)
{
    Rectangle::dolzina=d;
}

void Rectangle::setShirina(int s)
{
    Rectangle::shirina=s;
}

int Rectangle::getDolzina() const
{
    return dolzina;
}

int Rectangle::getShirina() const
{
    return shirina;
}

double Rectangle::getPerimetar() const
{
    return (2*getShirina() + 2*getDolzina());
}

double Rectangle::getPloshtina() const
{
    return (getDolzina()*getShirina());
}

void Rectangle::pecati() const
{
    cout<<"Centarot e";
    DvoDimenzionalni::pecati();
    cout<<"Dolzinata e "<<getDolzina()<<endl;
    cout<<"Shirinata e "<<getShirina()<<endl;
    cout<<"Centarot e";
    cout<<"Ploshtinata na Rectangle e "<<getPloshtina()<<endl;
    cout<<"Perimetart na Rectangle e "<<getPerimetar()<<endl;
}

int Rectangle::getBroj() const
{
    return brRectangle;
}



/*cilindar.cpp*/
#include <iostream>
#include <cilindar.h>

using namespace std;

int Cilindar::brCilindari=0;

Cilindar::Cilindar(double rad, double visina):Krug(rad)
{
    Cilindar::setVisina(visina);
    brCilindari++;
}

Cilindar::~Cilindar()
{
    brCilindari--;
}

void Cilindar::setVisina(double v)
{
    Cilindar::visina=v;
}

double Cilindar::getVisina() const
{
    return Cilindar::visina;
}

double Cilindar::getPerimetar() const
{
    return 2*(3.14*getDiametar()+Cilindar::getVisina());
}

double Cilindar::getPloshtina() const
{
    return 2*Krug::getPloshtina()+Krug::getPerimetar()*getVisina();
}

double Cilindar::getVolume() const
{
    return Krug::getPloshtina()*getVisina();
}

void Cilindar::pecati() const
{
    cout<<"Centarot e";
    TriDimenzionalni::pecati();
    cout<<"Visinata e "<<getVisina()<<endl;
    cout<<"radiusot na Krugot e "<<getRadius()<<endl;
    cout<<"Ploshtinata na Cilindarot e "<<getPloshtina()<<endl;
    cout<<"Perimetart na Cilindarot e "<<getPerimetar()<<endl;
}

int Cilindar::getBroj() const
{
    return brCilindari;
}


/*cuboid.cpp*/
#include <iostream>
#include <cuboid.h>

using namespace std;

int Cuboid::brCuboid=0;

Cuboid::Cuboid(int dol, int shir,double visina):Rectangle(dol,shir)
{
    Cuboid::setVisina(visina);
    brCuboid++;
}

Cuboid::~Cuboid()
{
    brCuboid--;
}

void Cuboid::setVisina(double v)
{
    Cuboid::visina=v;
}

double Cuboid::getVisina() const
{
    return Cuboid::visina;
}

double Cuboid::getPerimetar() const
{
    return (2*getDolzina()) + (2*getShirina());
}

double Cuboid::getPloshtina() const
{
    return (2*(getDolzina()*getShirina())) + (2*(getVisina()*getDolzina())) + (2*(getVisina()*getShirina()));
}

double Cuboid::getVolume() const
{
    return getDolzina()*getShirina()*getVisina();
}


void Cuboid::pecati() const
{
    cout<<"Centarot e";
    TriDimenzionalni::pecati();
    cout<<"Visinata e "<<getVisina()<<endl;
    cout<<"Ploshtinata na Cuboid e "<<getPloshtina()<<endl;
    cout<<"Perimetart na Cuboid e "<<getPerimetar()<<endl;
}

int Cuboid::getBroj() const
{
    return brCuboid;
}


/*svera.cpp*/
#include <iostream>
#include <svera.h>

using namespace std;

int Svera::brSveri=0;

Svera::Svera(double rad):Krug(rad)
{
    brSveri++;
}

Svera::~Svera()
{
    brSveri--;
}

double Svera::getPerimetar() const
{
    return 0.0;
}

double Svera::getPloshtina() const
{
    return 4*3.14*getRadius()*getRadius();
}

double Svera::getVolume() const
{
    return (4/3)*(3.14*getRadius()*getRadius()*getRadius());
}

void Svera::pecati() const
{
    cout<<"Centarot e";
    TriDimenzionalni::pecati();
    cout<<"Radiusot na sverata e "<<getRadius()<<endl;
    cout<<"Ploshtinata na Svera e "<<getPloshtina()<<endl;
    cout<<"Perimetart na Svera e "<<getPerimetar()<<endl;
}

int Svera::getBroj() const
{
    return brSveri;
}


/MAIN/
#include <iostream>
#include <krug.h>
#include <rectangle.h>
#include <triagolnik.h>
#include <cilindar.h>
#include <svera.h>
#include <cuboid.h>
#include <oblik.h>

using namespace std;


void menu();
Triagolnik mTriagolnik();
Krug mKrug();
Rectangle mPravoagolnik();
Cilindar mCilindar();
Svera mSvera();
Cuboid mCuboid();

int main()
    {
        int vlez,flag=0;
        while(1)
           {
               menu();
               cin>>vlez;
               switch (vlez) {
               case 1:
               {
                    Triagolnik t=mTriagolnik();
                    t.pecati();
                    break;
               }
               case 2:
               {
                   Krug k = mKrug();
                   k.pecati();
               }
                   break;
               case 3:
               {
                  Rectangle r = mPravoagolnik();
                  r.pecati();
                  break;
               }
               case 4:
               {
                   Svera s = mSvera();
                   s.pecati();
                   break;
               }
               case 5:
               {
                   Cuboid c = mCuboid();
                   c.pecati();
                   break;
               }
               case 6:
               {
                   Cilindar cil = mCilindar();
                   cil.pecati();
                   break;
               }
               case 7:
                   flag=1;
                   break;
               default:
                   cout<<"Pogreshen izbor"<<endl;
                   flag=1;
                   break;
               }
               if(flag==1)
                   break;
           }
           return 0;
    }

void menu()
{
        cout<<"Odberete edna od opciite"<<endl;
           cout<<"1 --> Vnesi triagolnik"<<endl;
           cout<<"2 --> Vnesi krug"<<endl;
           cout<<"3 --> Vnesi pravoagolnik"<<endl;
           cout<<"4 --> Vnesi Svera"<<endl;
           cout<<"5 --> Vnesi Cuboid"<<endl;
           cout<<"6 --> Vnesi Cilindar"<<endl;
           cout<<"7 --> Izlezi od menito"<<endl;
}

Triagolnik mTriagolnik()
{
    int s1,s2,s3;
       cout<<"Vnesi gi stranite na triagolnikot"<<endl;
       cin>>s1;
       cin>>s2;
       cin>>s3;
       Triagolnik t(s1,s2,s3);
       return t;
}

Krug mKrug()
{
    double r;
    cout<<"Vnesi go radiusot na krugot"<<endl;
    cin>>r;
    Krug k(r);
    return k;
}

Rectangle mPravoagolnik()
{
    int dolzina, shirina;
    cout<<"Vnesi visina i shirina na pravoagolnikot "<<endl;
    cin>>dolzina;
    cin>>shirina;
    Rectangle r(dolzina,shirina);
    return r;
}

Cilindar mCilindar()
{
    double r, visina;
    cout<<"Vnesi go radiusot na osnovniot krug vo cilindarot i visinata"<<endl;
    cin>>r;
    cin>>visina;
    Cilindar c(r,visina);
    return c;
}

Cuboid mCuboid()
{
    int dolzina,shirina,visina;
    cout<<"Vnesi dolzina, shirina i visina na cuboid"<<endl;
    cin>>dolzina;
    cin>>shirina;
    cin>>visina;
    Cuboid c(dolzina,shirina,visina);
    return  c;
}

Svera mSvera()
{
    double r;
    cout<<"Vnesi go radiusot na sverata"<<endl;
    cin>>r;
    Svera s(r);
    return s;
}

