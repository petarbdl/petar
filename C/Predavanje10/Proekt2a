/*Претходниот проект да се дополни со делење на карти на двајца играчи (две раце) и при тоа да се одреди кој од нив победил.*/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/* prototipovi */
void meshaj( int wDeck[][ 13 ] );
void deli( const int wDeck[][ 13 ], const char *wFace[], const char *wSuit[] );
int proverka(int redici[5], int koloni[5], const char *wFace[], const char *wSuit[]);

int main()
{
   /* inicijaliziraj ja nizata na boi */
   const char *boja[ 4 ] = { "Srce", "Karo", "List", "Detelina" };
    //int igrac1, igrac2;/*Promenlivi za da se smestat rezultatot od prviot i vtoriot igrac*/
   /* inicijaliziraj ja nizata na brojki */
   const char *brojka[ 13 ] =
      { "As", "Dva", "Tri", "Chetiri",
        "Pet", "Shest", "Sedum", "Osum",
        "Devet", "Deset", "Dzandar", "Dama", "Pop" };
   /* inicijaliziraj niza na spil */
   int spil[ 4 ][ 13 ] = { 0 };

   srand( time( 0 ) ); /* generator na sluchajni broevi */

   meshaj( spil );
   deli( spil, brojka, boja );

   return 0; /* uspeshen kraj */

} /* kraj main */

/* meshaj gi kartite vo shpilot */
void meshaj( int wDeck[][ 13 ] )
{
   int row;    /* broj na red */
   int column; /* broj na kolona */
   int card;   /* brojach */

   /* za sekoja od 52-te karti,
   odberi sluchajno mesto vo shpilot */
   for ( card = 1; card <= 52; card++ ) {

      /* biraj nova sluchajna lokacija dodeka ne najdesh
      slobodno mesto */
      do {
         row = rand() % 4;
         column = rand() % 13;
      } while( wDeck[ row ][ column ] != 0 ); /* kraj do...while */

      /* pojtavi ja kartata na izbranoto mesto vo spilot */
      wDeck[ row ][ column ] = card;
   } /* kraj for */
} /* kraj na funkcijata meshaj */

/* deli gi kartite vo shpilot */
void deli( const int wDeck[][ 13 ], const char *wFace[], const char *wSuit[] )
{
   int card;   /* brojach na karti */
   int row;    /* brojach na redovi */
   int column; /* brojach na koloni */
   int igrac1, igrac2;
   int koloni[5], redici[5], koloni2[5], redici2[5]; /*Cuvanje na podatoci za kartite shto padnale na prviot i na vtoriot igrac*/
   /* podeli ja sekoja od 52-te karti */
   int i=0,j=0;/*Brojac za kartite shto se podeleni*/
   for ( card = 1; card <= 10; card++ )/*MAksimalnata vrednost na brojacot ja pomestiv od 5 na 10, za da se podelat po 5 karti na dvajcata igraci*/ {

      /* pomini niz redovite na wDeck */
      for ( row = 0; row <= 3; row++ ) {

         /* pomini niz kolonite na wDeck za tekovniot red */
         for ( column = 0; column <= 12; column++ ) {

            /* ako mestoto ja sodrzhi tekovnata karta, prikazhi ja kartata */
             if ( wDeck[ row ][ column ] == card ) {
                if(card<=5)
                {
                    /*Kartite na prviot igrac*/
                    koloni[i]=column;
                    redici[i]=row;
                    i++;
                }
                else
                {
                    /*Kartite na vtoriot igrac*/
                    koloni2[j]=column;
                    redici2[j]=row;
                    j++;
                }

             } /* kraj if */
          } /* kraj for */
       } /* kraj for */
    } /* kraj for */
   printf("Igrac 1 ima ");
   igrac1=proverka(redici,koloni,wFace,wSuit);
   printf("Igrac 2 ima ");
   igrac2=proverka(redici2,koloni2,wFace,wSuit);
   if(igrac1>igrac2)
   {
        printf("Pobedi IGRAC 1\n");
   }
   if(igrac1<igrac2)
   {
       printf("Pobedi IGRAC 2\n");
   }
   else
   {
       printf("Dvajcata imaat isti rezultat\n");
   }
 } /* kraj na funkcijata deli */
int proverka(int r[5], int k[5],const char *wFace[], const char *wSuit[])
{
    int i,j, brojac=1, max=1, flag=0;
    /*Pecatenje na kartite na igracot*/
    for(i=0;i<5;i++)
    {
        printf( "%s %s%c ", wFace[ k[i] ], wSuit[ r[i] ], i==4 ? '\n':' ');
    }
    /*Proverka na par, triplet i for of a kind*/
    for(i=0;i<5;i++)
    {
        brojac=1;
        for(j=i+1;j<5;j++)
        {
            if(k[i]==k[j])
                brojac++;
        }
        if(brojac>max)
        {
            max=brojac;
            flag++;
        }
    }
    brojac=1;
    /*Proverka na boja*/
    for(i=0;i<5;i++)
    {
            if(r[i]==r[i+1])
                brojac++;
    }
    if(brojac==5)
    {
        printf("Igracot ima boja\n");
        return 4;
    }
    else
    if(max==2 && flag==2)
    {
        printf("Igracot ima dva para\n");
        return 2;
    }
    else
    if(max==2)
    {
        printf("Igracot ima par\n");
        return 1;
    }
    else
    if(max==3)
    {
        printf("Igracot ima triling\n");
        return 3;
    }
    else
    if(max==4)
    {
        printf("Igracot ima Four of a kind\n");
        return 5;
    }
    else
    {
        printf("Igracot nema nishto\n");
        return 0;
    }
}
