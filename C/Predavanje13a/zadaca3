/*Напиши програм кој врши бришење од дрво, така да структурата на дрвото не се губи. 
 * Секоја од користените функции да се објасни. (помош: користете web решенија за binary tree delete)*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/* samo-referencirachka struktura */
struct treeNode {
   struct treeNode *leftPtr;  /* pokazhuvach do levoto poddrvo */
   int data; /* node value */
   struct treeNode *rightPtr; /* pokazhuvach do desnoto poddrvo */
}; /* kraj structure treeNode */

typedef struct treeNode TreeNode; /* sinonim za struct treeNode */
typedef TreeNode *TreeNodePtr; /* sinonim za TreeNode* */

/* prototipovi */
void insertNode( TreeNodePtr *treePtr, int value );
void inOrder( TreeNodePtr treePtr );
void preOrder( TreeNodePtr treePtr );
void postOrder( TreeNodePtr treePtr );
TreeNodePtr minNode(TreeNodePtr node);
TreeNodePtr deleteNode(TreeNodePtr root, int key);


/* pochetok na izvrshuvanjeto */
int main()
{
   int i; /* brojach od 1-10 */
   int item; /* promenliva shto sodrzhi sluchajni vrednosti */
   int zaBrishenje; /*Promenliva za cuvanje na brojot sho treba da se brishi od drvoto*/
   TreeNodePtr rootPtr = NULL; /* drvoto vo pochetokot e prazno */

   srand( time( NULL ) );
   printf( "Broevite koi se stavaat vo drvoto se:");

   /* vnesi sluchajni broevi megju 1 i 15 vo drvoto */
   for ( i = 1; i <= 10; i++ ) {
      item = rand() % 15;
      printf( "%3d", item );
      insertNode( &rootPtr, item );
   } /* kraj for */

   /* pomini go drvoto vo inOrder */
   printf( "\n\nPominuvanjeto vo inOrder dava:\n" );
   inOrder( rootPtr );

   printf("\n\nVnesite element shto sakate da go izbrishete\n");
   scanf("%d", &zaBrishenje);
   deleteNode(rootPtr,zaBrishenje);

   printf( "\n\nPominuvanjeto vo inOrder, posle brishenje na elementot %d:\n", zaBrishenje );
   inOrder( rootPtr );
   printf("\n");
   return 0; /* uspeshen kraj */

} /* kraj main */

/* vnesi jazel vo drvo */
void insertNode( TreeNodePtr *treePtr, int value )
{

   /* ako drvoto e prazno */
   if ( *treePtr == NULL ) {
      *treePtr = malloc( sizeof( TreeNode ) );

      /* ako alocirashe memorija, napolni ja so podatoci */
      if ( *treePtr != NULL ) {
         ( *treePtr )->data = value;
         ( *treePtr )->leftPtr = NULL;
         ( *treePtr )->rightPtr = NULL;
      } /* kraj if */
      else {
         printf( "%d ne e vneseno. Nema dovolno memorija.\n", value );
      } /* kraj else */

   } /* kraj if */
   else { /* drvoto ne e prazno */

      /* podatokot shto se vnesuva e pomal od podatokot vo tekovniot jazel */
      if ( value < ( *treePtr )->data ) {
         insertNode( &( ( *treePtr )->leftPtr ), value );
      } /* kraj if */

      /* podatokot shto se vnesuva e pogolem od podatokot vo tekovniot jazel */
      else if ( value > ( *treePtr )->data ) {
         insertNode( &( ( *treePtr )->rightPtr ), value );
      } /* kraj else if */
      else { /* duplikat vrednostite se ignoriraat */
               printf( "dup" );
            } /* kraj else */
   } /* kraj else */

} /* kraj na funkcijata insertNode */

/* pochni so inorder pominuvanje na drvo */
void inOrder( TreeNodePtr treePtr )
{
   /* ako drvoto ne e prazno, pomini go */
   if ( treePtr != NULL ) {
      inOrder( treePtr->leftPtr );
      printf( "%3d", treePtr->data );
      inOrder( treePtr->rightPtr );
   } /* kraj if */
} /* kraj na funkcijata inOrder */

/* pochni so preorder pominuvanje na drvoto */
void preOrder( TreeNodePtr treePtr )
{
   /* ako drvoto ne e prazno, pomini go */
   if ( treePtr != NULL ) {
      printf( "%3d", treePtr->data );
      preOrder( treePtr->leftPtr );
      preOrder( treePtr->rightPtr );
   } /* kraj if */
} /* kraj na funkcijata preOrder */

/* pochni so postorder pominuvanjeto na drvoto */
void postOrder( TreeNodePtr treePtr )
{
   /* ako drvoto ne e prazno, pomini go */
   if ( treePtr != NULL ) {
      postOrder( treePtr->leftPtr );
      postOrder( treePtr->rightPtr );
      printf( "%3d", treePtr->data );
   } /* kraj if */
} /* kraj na funkcijata postOrder */

TreeNodePtr minNode(TreeNodePtr node)
{
    TreeNodePtr current = node;

    /* Go bara najleviot list */
    while (current && current->leftPtr != NULL)
        current = current->leftPtr;

    return current;
}

/* Ovaa funkcija za daden pokazuvac kun drvo i vrednost, ja bara vrednosta vo drvoto i ja brishe. Go vrakja jazelot sho go izbrishal */
TreeNodePtr deleteNode(TreeNodePtr root, int key)
{
    // Granicen slucaj
    if (root == NULL) return root;

    // Ako vrednosta shto treba da se izbrishe e pomala od vrednosta vo jazelot, baraj vo levoto poddrvo

    if (key < root->data)
        root->leftPtr = deleteNode(root->leftPtr, key);

    //Ako vrednosta shto treba da se izbrishe e pomala od vrednosta vo jazelot, baraj vo desnoto poddrvo
    
    else if (key > root->data)
        root->rightPtr = deleteNode(root->rightPtr, key);

    // Ako ima vrednost ista so vrednosta vo jazelot, ovaj jazel treba da se izbrishe
    else
    {
        // So edno dete ili bez deca
        if (root->leftPtr == NULL)
        {
            TreeNodePtr temp = root->rightPtr;
            free(root);
            return temp;
        }
        else if (root->rightPtr == NULL)
        {
            TreeNodePtr temp = root->leftPtr;
            free(root);
            return temp;
        }

        // So dve deca, go bara sledbenikot na jazelot shtotreba da se izbrishe
        TreeNodePtr temp = minNode(root->rightPtr);

        // Iskopiraj ja vrednosta shoja najde vo momentalniot jazel
        root->data = temp->data;

        // Izbrishi go jazelot od koj ja zedovme novata vrednost na this->jazel.
        root->rightPtr = deleteNode(root->rightPtr, temp->data);
    }
    return root;
}
