#include <iostream>

using namespace std;

template <class T> class Array
{
private:
    T *pole;
    int sizeOfpole;
public:
    Array(T *a, int size)
    {
        sizeOfpole=size;
        pole = new T[size];
        for(int i=0;i<sizeOfpole;i++)
        {
            pole[i]=a[i];
        }
    }
    void setSize(int s)
    {
        sizeOfpole=s;
    }
    void setElement(T element, int position)
    {
        if(position<0 || position>sizeOfpole)
        {
            cout<<"Position out of boundaries"<<endl;
            return;
        }
        pole[position]=element;

    }
    T getElement(int position)
    {
        if(position>sizeOfpole || position<0)
        {
            cout<<"Position error"<<endl;
            return -100000;
        }
        return pole[position];
    }
    void printPole()
    {
        for(int i=0;i<sizeOfpole;i++)
        {
            cout<<pole[i]<<" ";
        }
        cout<<endl;
    }
};

int main()
{
    double arrDou[]={1.1,2.1,3.3,4.2,5.3};
    int arrInt[]={1,2,3,4,5,6};
    Array<int> intArray(arrInt,6);
    Array<double> douArr(arrDou, 5);
    intArray.printPole();
    cout<<"Element in position 2, before changes "<<intArray.getElement(2)<<endl;
    intArray.setElement(1337,2);
    cout<<"Element in position 2, after changes "<<intArray.getElement(2)<<endl;
    intArray.printPole();
    douArr.printPole();
    return 0;
}
